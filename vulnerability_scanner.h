#ifndef VULNERABILITY_SCANNER_H
#define VULNERABILITY_SCANNER_H

#include <string>
#include <vector>
#include <map>
#include <memory>
#include <curl/curl.h>
#include <thread>
#include <mutex>
#include <regex>
#include <fstream>
#include <chrono>

// Forward declarations
class Vulnerability;
class Scanner;
class ReportGenerator;
class Database;

// Vulnerability class to represent found vulnerabilities
class Vulnerability {
public:
    enum Type {
        DIRECTORY_TRAVERSAL,
        SENSITIVE_FILE_EXPOSURE,
        CREDENTIAL_DETECTION,
        XSS,
        SQL_INJECTION
    };

    Vulnerability(Type type, const std::string& url, const std::string& description, 
                 const std::string& severity = "Medium");
    
    Type getType() const { return type_; }
    std::string getUrl() const { return url_; }
    std::string getDescription() const { return description_; }
    std::string getSeverity() const { return severity_; }
    std::string getTimestamp() const { return timestamp_; }
    std::string typeToString() const;

private:
    Type type_;
    std::string url_;
    std::string description_;
    std::string severity_;
    std::string timestamp_;
};

// HTTP Response structure
struct HttpResponse {
    std::string data;
    long response_code;
    std::string headers;
};

// Configuration system for loading patterns
class Config {
public:
    Config();
    bool loadFromFile(const std::string& filename);
    std::vector<std::string> getDirectoryTraversalPatterns() const { return dir_traversal_patterns_; }
    std::vector<std::string> getSensitiveFiles() const { return sensitive_files_; }
    std::vector<std::regex> getCredentialPatterns() const { return credential_patterns_; }
    std::vector<std::regex> getXSSPatterns() const { return xss_patterns_; }
    std::vector<std::regex> getSQLPatterns() const { return sql_patterns_; }

private:
    std::vector<std::string> dir_traversal_patterns_;
    std::vector<std::string> sensitive_files_;
    std::vector<std::regex> credential_patterns_;
    std::vector<std::regex> xss_patterns_;
    std::vector<std::regex> sql_patterns_;
    void loadDefaultPatterns();
};

// Database class for storing vulnerabilities and scan history
class Database {
public:
    Database(const std::string& db_file = "vulnerabilities.db");
    ~Database();
    
    bool initialize();
    bool storeVulnerability(const Vulnerability& vuln, const std::string& scan_id);
    bool storeScanHistory(const std::string& scan_id, const std::string& target, 
                         int vuln_count, const std::string& status);
    std::vector<Vulnerability> getVulnerabilities(const std::string& scan_id = "");
    std::vector<std::map<std::string, std::string>> getScanHistory();

private:
    std::string db_file_;
    void* db_; // SQLite database handle
    bool executeQuery(const std::string& query);
};

// Main Scanner class
class Scanner {
public:
    Scanner();
    ~Scanner();
    
    bool initialize();
    void setConfig(const Config& config) { config_ = config; }
    void setThreadCount(int count) { thread_count_ = count; }
    
    std::vector<Vulnerability> scanUrl(const std::string& url);
    std::vector<Vulnerability> scanUrls(const std::vector<std::string>& urls);
    
    // Individual vulnerability checks
    std::vector<Vulnerability> checkDirectoryTraversal(const std::string& base_url);
    std::vector<Vulnerability> checkSensitiveFiles(const std::string& base_url);
    std::vector<Vulnerability> checkCredentials(const std::string& url, const std::string& content);
    std::vector<Vulnerability> checkXSS(const std::string& url);
    std::vector<Vulnerability> checkSQLInjection(const std::string& url);

private:
    Config config_;
    int thread_count_;
    std::mutex results_mutex_;
    
    HttpResponse makeHttpRequest(const std::string& url);
    static size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* data);
    void scanWorker(const std::vector<std::string>& urls, int start, int end, 
                   std::vector<Vulnerability>& results);
};

// Report Generator class
class ReportGenerator {
public:
    enum Format {
        HTML,
        PDF,
        JSON,
        CONSOLE
    };
    
    ReportGenerator();
    
    bool generateReport(const std::vector<Vulnerability>& vulnerabilities, 
                       const std::string& filename, Format format);
    void displayConsoleReport(const std::vector<Vulnerability>& vulnerabilities);

private:
    std::string generateHTML(const std::vector<Vulnerability>& vulnerabilities);
    std::string generateJSON(const std::vector<Vulnerability>& vulnerabilities);
    bool generatePDF(const std::string& html_content, const std::string& filename);
};

#endif // VULNERABILITY_SCANNER_H